#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_NODES 100

struct Graph {
    int numNodes;
    int adjMatrix[MAX_NODES][MAX_NODES];
};

int minKey(int key[], bool mstSet[], int numNodes) {
    int min = INT_MAX, minIndex, i;
    for (i = 0; i < numNodes; i++) {
        if (mstSet[i] == false && key[i] < min) {
            min = key[i];
            minIndex = i;
        }
    }
    return minIndex;
}

void printMST(int parent[], int graph[MAX_NODES][MAX_NODES], int numNodes) {
    int i;
    printf("Edge \tWeight\n");
    for (i = 1; i < numNodes; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}

void prim(struct Graph* graph) {
    int parent[MAX_NODES];
    int key[MAX_NODES];
    bool mstSet[MAX_NODES];
    int i, j;

    for (i = 0; i < graph->numNodes; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (i = 0; i < graph->numNodes - 1; i++) {
        int u = minKey(key, mstSet, graph->numNodes);
        mstSet[u] = true;

        for (j = 0; j < graph->numNodes; j++) {
            if (graph->adjMatrix[u][j] && mstSet[j] == false && graph->adjMatrix[u][j] < key[j]) {
                parent[j] = u;
                key[j] = graph->adjMatrix[u][j];
            }
        }
    }

    printMST(parent, graph->adjMatrix, graph->numNodes);
}

int main() {
    struct Graph graph;
    int numNodes, i, j;

    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    graph.numNodes = numNodes;

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < numNodes; i++) {
        for (j = 0; j < numNodes; j++) {
            scanf("%d", &graph.adjMatrix[i][j]);
        }
    }

    prim(&graph);

    return 0;
}